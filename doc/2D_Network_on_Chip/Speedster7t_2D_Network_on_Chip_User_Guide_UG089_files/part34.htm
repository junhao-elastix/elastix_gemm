<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Interface-only Connections</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part33.htm">&lt; Previous</a><span> | </span><a href="../Speedster7t_2D_Network_on_Chip_User_Guide_UG089.html">Contents</a><span> | </span><a href="part35.htm">Next &gt;</a></p><p class="s13" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark66">&zwnj;</a>Interface-only Connections<a name="bookmark75">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">The 2D NoC connects certain interface endpoints without using the FPGA fabric. Interface-only connections make use of only the peripheral portion of the 2D NoC which connects PCIe to GDDR6, DDR4, and FCU. Additionally, the FCU uses the 2D NoC to access the CSR space of all interface subsystems including PCIe, GDDR6, DDR4, and Ethernet. The connections between the PCIe, FCU, GDDR6, and DDR4 use the AXI4 protocol to send transactions. GDDR6 and DDR4 endpoints can only act as responders, while the PCIe and FCU can act as both initiator and responder. The following figure shows an example of the PCIe endpoint sending read or write transactions to a GDDR6 channel.</p><p style="padding-top: 1pt;text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 27pt;text-indent: 0pt;text-align: left;"><span><img width="624" height="506" alt="image" src="Image_048.png"/></span></p><p class="s14" style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: center;">Figure 12: <span class="h4">PCIe-to-GDDR6 Transactions</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Because these connections do not consume any FPGA fabric resources, there is no impact on routing, area, or timing of the logic in the FPGA. The 2D NoC handles any clock domain crossing internally, as well as flow control and transaction arbitration. However, the traffic flow to expected endpoints must be considered so as to optimize for latency and congestion on the peripheral portion of the 2D NoC. For example, when sending transactions from the PCIe endpoint to several channels of GDDR6, choosing channels on both the east and west side of the FPGA can spread out the traffic rather than sending all traffic down one side, thus reducing congestion on the 2D NoC.</p><p style="padding-top: 6pt;text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part33.htm">&lt; Previous</a><span> | </span><a href="../Speedster7t_2D_Network_on_Chip_User_Guide_UG089.html">Contents</a><span> | </span><a href="part35.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
