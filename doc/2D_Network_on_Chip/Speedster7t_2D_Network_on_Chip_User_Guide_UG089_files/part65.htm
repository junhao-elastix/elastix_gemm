<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>NAP Bus Functional Model</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part64.htm">&lt; Previous</a><span> | </span><a href="../Speedster7t_2D_Network_on_Chip_User_Guide_UG089.html">Contents</a><span> | </span><a href="part66.htm">Next &gt;</a></p><p class="s13" style="padding-top: 18pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark129">&zwnj;</a>NAP Bus Functional Model<a name="bookmark138">&zwnj;</a></p><p style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">The first phase of simulation with a design is to functionally communicate with a NoC access point (NAP) in the fabric. The Achronix library includes simple BFMs in each instance of a NAP macro. Each NAP includes simple tasks which can be called to simulate sending or receiving a transaction. The tasks depend on the type of NAP macro used and the direction of the transaction. The testbench calls these tasks in the BFMs by using bind statements.</p><p style="text-indent: 0pt;text-align: left;"><span><img width="673" height="399" alt="image" src="Image_099.png"/></span></p><p class="s34" style="text-indent: 0pt;text-align: left;">NAP Task BFM Binding Example</p><p style="padding-top: 3pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="text-indent: 0pt;text-align: left;">// Testbench has to connect to NAP responder via tasks</p><p class="s35" style="padding-top: 1pt;text-indent: 0pt;text-align: left;">// When binding, the module is inside the target module, so gets</p><p class="s35" style="padding-top: 1pt;text-indent: 0pt;text-align: left;">// parameters and signal names from that module - not this module</p><p style="padding-top: 3pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 4pt;text-indent: 0pt;line-height: 120%;text-align: left;">bind dut.i_axi_responder_nap_wrapper.x_NAP_AXI_SLAVE tb_noc</p><p class="s35" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">inst_noc (</p><p class="s35" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">// Inputs</p><p class="s35" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">.i_clk        (clk), // bound to signal in AXI_NAP_SLAVE</p><p class="s35" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">.i_reset_n      (rstn) // bound to signal in AXI_NAP_SLAVE</p><p class="s35" style="padding-top: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">);</p><p class="s34" style="text-indent: 0pt;text-align: left;">NAP Task BFM Binding Example</p><p style="padding-top: 3pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="text-indent: 0pt;text-align: left;">// Testbench has to connect to NAP responder via tasks</p><p class="s35" style="padding-top: 1pt;text-indent: 0pt;text-align: left;">// When binding, the module is inside the target module, so gets</p><p class="s35" style="padding-top: 1pt;text-indent: 0pt;text-align: left;">// parameters and signal names from that module - not this module</p><p style="padding-top: 3pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 4pt;text-indent: 0pt;line-height: 120%;text-align: left;">bind dut.i_axi_responder_nap_wrapper.x_NAP_AXI_SLAVE tb_noc</p><p class="s35" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">inst_noc (</p><p class="s35" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">// Inputs</p><p class="s35" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">.i_clk        (clk), // bound to signal in AXI_NAP_SLAVE</p><p class="s35" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">.i_reset_n      (rstn) // bound to signal in AXI_NAP_SLAVE</p><p class="s35" style="padding-top: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"/><p class="s34" style="text-indent: 0pt;text-align: left;">NAP Task BFM Binding Example</p><p style="padding-top: 3pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="text-indent: 0pt;text-align: left;">// Testbench has to connect to NAP responder via tasks</p><p class="s35" style="padding-top: 1pt;text-indent: 0pt;text-align: left;">// When binding, the module is inside the target module, so gets</p><p class="s35" style="padding-top: 1pt;text-indent: 0pt;text-align: left;">// parameters and signal names from that module - not this module</p><p style="padding-top: 3pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 4pt;text-indent: 0pt;line-height: 120%;text-align: left;">bind dut.i_axi_responder_nap_wrapper.x_NAP_AXI_SLAVE tb_noc</p><p class="s35" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">inst_noc (</p><p class="s35" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">// Inputs</p><p class="s35" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">.i_clk        (clk), // bound to signal in AXI_NAP_SLAVE</p><p class="s35" style="padding-top: 1pt;padding-left: 39pt;text-indent: 0pt;text-align: left;">.i_reset_n      (rstn) // bound to signal in AXI_NAP_SLAVE</p><p class="s35" style="padding-top: 1pt;padding-left: 19pt;text-indent: 0pt;text-align: left;">);</p><p class="s35" style="text-indent: 0pt;line-height: 120%;text-align: left;">// DUT my_design_with_nap</p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">dut (</p><p class="s35" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">// Inputs</p><p class="s35" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">.i_clk</p><p class="s35" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">.i_reset_n</p><p class="s35" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">);</p><p class="s35" style="text-indent: 0pt;line-height: 120%;text-align: left;">// DUT my_design_with_nap</p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">dut (</p><p class="s35" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">// Inputs</p><p class="s35" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">.i_clk</p><p class="s35" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">.i_reset_n</p><p class="s35" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">);</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;line-height: 120%;text-align: left;">// DUT my_design_with_nap</p><p class="s35" style="padding-left: 9pt;text-indent: 0pt;text-align: left;">dut (</p><p class="s35" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">// Inputs</p><p class="s35" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">.i_clk</p><p class="s35" style="padding-top: 1pt;padding-left: 29pt;text-indent: 0pt;text-align: left;">.i_reset_n</p><p class="s35" style="padding-top: 1pt;padding-left: 9pt;text-indent: 0pt;text-align: left;">);</p><p class="s35" style="text-indent: 0pt;text-align: left;">(clk),</p><p class="s35" style="padding-top: 1pt;text-indent: 0pt;text-align: left;">(reset_n)</p><p class="s35" style="text-indent: 0pt;text-align: left;">(clk),</p><p class="s35" style="padding-top: 1pt;text-indent: 0pt;text-align: left;">(reset_n)</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">(clk),</p><p class="s35" style="padding-top: 1pt;text-indent: 0pt;text-align: left;">(reset_n)</p><p class="s35" style="text-indent: 0pt;text-align: left;">//----------------------------</p><p class="s35" style="padding-left: 4pt;text-indent: -5pt;line-height: 22pt;text-align: left;">// The DUT that instantiates the NAP module my_design_with_nap (</p><p class="s35" style="text-indent: 0pt;text-align: left;">//----------------------------</p><p class="s35" style="padding-left: 4pt;text-indent: -5pt;line-height: 22pt;text-align: left;">// The DUT that instantiates the NAP module my_design_with_nap (</p><p style="text-indent: 0pt;text-align: left;"/><p class="s35" style="text-indent: 0pt;text-align: left;">//----------------------------</p><p class="s35" style="padding-left: 4pt;text-indent: -5pt;line-height: 22pt;text-align: left;">// The DUT that instantiates the NAP module my_design_with_nap (</p><p class="s16" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a href="https://support.achronix.com/hc/en-us/articles/4405039082132-How-Do-I-Gain-Access-to-Confidential-Documents-" class="s3" target="_blank">The following example shows how to bind to the BFM tasks in a NAP and use a testbench to respond to requests from the FPGA fabric logic initiating transactions. These examples are only snippets of code. For a more detailed example of how to use the NAP BFMs in a simulation, refer to the </a><a href="https://support.achronix.com/hc/en-us/articles/4405039082132-How-Do-I-Gain-Access-to-Confidential-Documents-" class="s21" target="_blank">Speedster7t DDR4 Reference Design Guide </a>(RD018)<span style=" color: #303030;">, in STANDALONE simulation mode.</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p style="text-indent: 0pt;text-align: left;"><span><img width="673" height="719" alt="image" src="Image_100.png"/></span></p><p class="s35" style="padding-top: 9pt;padding-left: 24pt;text-indent: 0pt;line-height: 120%;text-align: left;">input i_clk, input i_reset_n</p><p class="s35" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">);</p><p style="padding-top: 3pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">ACX_NAP_AXI_SLAVE i_axi_responder_nap_wrapper (</p><p class="s35" style="padding-top: 1pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">.clk     (i_clk),</p><p class="s35" style="padding-top: 1pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">.rstn     (i_reset_n),</p><p style="padding-top: 3pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">//----------------------------</p><p style="padding-top: 3pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 14pt;text-indent: 0pt;line-height: 120%;text-align: left;">// The ACX_NAP_AXI_SLAVE instantiates the NAP_AXI_SLAVE which has the BFM tasks NAP_AXI_SLAVE x_NAP_AXI_SLAVE (</p><p class="s35" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">.clk     (i_clk),</p><p class="s35" style="padding-top: 1pt;padding-left: 54pt;text-indent: 0pt;text-align: left;">.rstn    (i_reset_n),</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 14pt;text-indent: 0pt;text-align: left;">//----------------------------</p><p class="s35" style="padding-left: 14pt;text-indent: 0pt;line-height: 22pt;text-align: left;">// the testbench that is bound to the NAP calls the tasks module tb_noc</p><p class="s35" style="padding-top: 1pt;padding-left: 14pt;text-indent: 0pt;text-align: left;">(</p><p class="s35" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">// Inputs</p><p class="s35" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">input wire     i_clk,</p><p class="s35" style="padding-top: 1pt;padding-left: 34pt;text-indent: 0pt;text-align: left;">input wire      i_reset_n  // Negative synchronous reset</p><p class="s35" style="padding-top: 1pt;padding-left: 14pt;text-indent: 0pt;text-align: left;">);</p><p style="padding-top: 3pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 34pt;text-indent: 0pt;line-height: 120%;text-align: left;">// Support read requests by calling tasks in NAP initial</p><p class="s35" style="padding-left: 34pt;text-indent: 0pt;text-align: left;">begin</p><p class="s35" style="padding-top: 1pt;padding-left: 54pt;text-indent: 0pt;line-height: 120%;text-align: left;">#1000   // Allow NAP simulations models to reset first while(1)</p><p class="s35" style="padding-left: 54pt;text-indent: 0pt;text-align: left;">begin</p><p class="s35" style="padding-top: 1pt;padding-left: 74pt;text-indent: 0pt;line-height: 120%;text-align: left;">// Blocking call. Task will only complete when request made get_AR(t_arid, t_araddr, t_arlen, t_arsize, t_arburst, t_arlock, t_arqos); begin</p><p class="s35" style="padding-left: 93pt;text-indent: 0pt;text-align: left;">// Read request logged</p><p class="s35" style="padding-top: 1pt;padding-left: 93pt;text-indent: 0pt;line-height: 120%;text-align: left;">for( i=t_arlen; i&gt;0; i=i-1 ) begin</p><p class="s35" style="padding-left: 113pt;text-indent: 0pt;line-height: 120%;text-align: left;">issue_R(t_arid,mem_array_out,2&#39;b00,1&#39;b0); t_araddr = t_araddr + 42&#39;h01;</p><p class="s35" style="padding-left: 113pt;text-indent: 0pt;text-align: left;">@(posedge i_clk);</p><p class="s35" style="padding-top: 1pt;padding-left: 93pt;text-indent: 0pt;line-height: 120%;text-align: left;">end issue_R(t_arid,mem_array_out,2&#39;b00,1&#39;b1); @(posedge i_clk);</p><p class="s35" style="padding-left: 74pt;text-indent: 0pt;text-align: left;">end</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="text-indent: 0pt;text-align: right;">end</p><p style="padding-top: 3pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s35" style="padding-left: 2pt;text-indent: 0pt;text-align: left;">end</p><p class="s35" style="padding-top: 1pt;padding-left: 2pt;text-indent: 0pt;text-align: left;">@(posedge i_clk);</p><p style="padding-top: 1pt;text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part66.htm">ACX_NAP_AXI_SLAVE Responder Macro</a><a class="toc0" href="part67.htm">ACX_NAP_AXI_MASTER Initiator Macro</a><a class="toc0" href="part68.htm">ACX_NAP_HORIZONTAL Macro</a><a class="toc0" href="part69.htm">ACX_NAP_VERTICAL Macro</a><a class="toc0" href="part70.htm">ACX_NAP_ETHERNET Macro</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part64.htm">&lt; Previous</a><span> | </span><a href="../Speedster7t_2D_Network_on_Chip_User_Guide_UG089.html">Contents</a><span> | </span><a href="part66.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
