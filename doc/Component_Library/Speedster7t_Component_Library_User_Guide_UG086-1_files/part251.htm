<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Architecture</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part250.htm">&lt; Previous</a><span> | </span><a href="../Speedster7t_Component_Library_User_Guide_UG086-1.html">Contents</a><span> | </span><a href="part252.htm">Next &gt;</a></p><h3 style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark289">&zwnj;</a>Architecture<a name="bookmark437">&zwnj;</a></h3><p class="s3" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">For small integer sizes (<span class="s17">int_size </span><a href="part11.htm#bookmark97" class="s4">≤ 8), by default, the multiplier is constructed using reconfigurable logic which uses the efficient Achronix MLUT feature to reduce </a><span style=" color: #007D39;">LUT (see page 18) </span>count compared to other FPGAs.</p><p class="s3" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">For <span class="s17">int_size </span>≤ 8, the <span class="s17">architecture </span><a href="part139.htm#bookmark390" class="s4">parameter can be used to select an implementation with an </a><a href="part139.htm#bookmark390" class="s13">ACX_MLP72 (see page </a><span style=" color: #007D39;">95) </span>(this includes all registers and the accumulator). However, while this setting can result in a faster design, using an entire ACX_MLP72 for a single multiplication is not an efficient use of resources. Better efficiency can be achieved by using the ACX_INT_MULT_N module, which allows combining several multiplications in a single ACX_MLP72. Alternatively, one can write <span class="s17">a*b </span>and let Synplify and ACE handle the implementation, which also maps to an ACX_MLP72, and may pack several multiplications into a single ACX_MLP72 (packing decisions are based on the netlist connectivity).</p><p class="s3" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">For <span class="s17">int_size </span>= 16, the implementation always uses a single ACX_MLP72 (this includes all registers and the accumulator). As before, resource usage can be improved by using ACX_INT_MULT_N to combine two 16×16 multiplications in a single ACX_MLP72. Alternatively, writing <span class="s17">a*b </span>also uses an ACX_MLP72 implementation, and may pack two multiplications depending on netlist connectivity.</p><p class="s3" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">For <span class="s17">int_size </span>= 32, the implementation always uses a single ACX_MLP72. The ACX_MLP72 includes most of the registers, but not the accumulator. If accumulation is enabled, the accumulator and associated register are implemented with fabric logic.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part250.htm">&lt; Previous</a><span> | </span><a href="../Speedster7t_Component_Library_User_Guide_UG086-1.html">Contents</a><span> | </span><a href="part252.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
