<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>ACX_MLP72</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part138.htm">&lt; Previous</a><span> | </span><a href="../Speedster7t_Component_Library_User_Guide_UG086-1.html">Contents</a><span> | </span><a href="part140.htm">Next &gt;</a></p><p class="s16" style="padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark177">&zwnj;</a>ACX_MLP72<a name="bookmark390">&zwnj;</a></p><p class="s3" style="padding-top: 7pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Arithmetic within the Speedster7t architecture is primarily focused on the machine learning processing block (ACX_MLP72). This dedicated silicon block is optimized for artificial intelligence and machine learning (AI/ML) functions.</p><p class="s3" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">The machine learning processor block (MLP) is an array of up to 32 multipliers, followed by an adder tree, and an accumulator. The MLP is also tightly coupled with two memory blocks, a BRAM72k and LRAM2k. These memories can be used individually or in conjunction with the array of multipliers. The number of multipliers available varies with the bit width of each operand and the total width of input data. When the MLP is used in conjunction with a BRAM72k, the amount of data inputs to the MLP block increases along with the number of multipliers available.</p><p class="s3" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">The MLP offers a range of features:</p><p class="s3" style="padding-top: 5pt;padding-left: 54pt;text-indent: -30pt;line-height: 148%;text-align: justify;"><span><img width="5" height="5" alt="image" src="Image_191.png"/></span><span class="s12"> </span>Configurable multiply precision and multiplier count. Any of the following modes are available: <span><img width="5" height="5" alt="image" src="Image_192.png"/></span><span class="s26"> </span>Up to 32 multiplies for 4-bit integers or 4-bit block floating-point values in a single MLP <span><img width="5" height="5" alt="image" src="Image_193.png"/></span><span class="s26"> </span>Up to 16 multiplies for 8-bit integers or 8-bit block floating-point values in a single MLP <span><img width="5" height="5" alt="image" src="Image_194.png"/></span><span class="s26"> </span>Up to 4 multiplies for 16-bit integers in a single MLP</p><p class="s3" style="padding-left: 54pt;text-indent: 0pt;line-height: 148%;text-align: justify;"><span><img width="5" height="5" alt="image" src="Image_195.png"/></span><span class="s12"> </span>Up to 2 multiplies for 16-bit floating point with both 5-bit and 8-bit exponents in a single MLP <span><img width="5" height="5" alt="image" src="Image_196.png"/></span><span class="s26"> </span>Up to 2 multiplies for 24-bit floating point in a single MLP</p><p class="s3" style="padding-left: 54pt;text-indent: -30pt;line-height: 148%;text-align: justify;"><span><img width="5" height="5" alt="image" src="Image_197.png"/></span><span class="s12"> </span>Multiple number formats: <span><img width="5" height="5" alt="image" src="Image_198.png"/></span><span class="s26"> </span>Integer</p><p class="s3" style="padding-left: 54pt;text-indent: 0pt;line-height: 148%;text-align: justify;"><span><img width="5" height="5" alt="image" src="Image_199.png"/></span><span class="s12"> </span>Floating point 16 (including B float 16) <span><img width="5" height="5" alt="image" src="Image_200.png"/></span><span class="s26"> </span>Floating point 24</p><p class="s12" style="padding-left: 66pt;text-indent: -11pt;text-align: justify;"><span><img width="5" height="5" alt="image" src="Image_201.png"/></span> <span class="s3">Block floating point, a method that combines the efficiency of the integer multiplier-adder tree with the range of the floating point accumulators</span></p><p class="s12" style="padding-top: 4pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_202.png"/></span> <span class="s3">Adder tree and accumulator block</span></p><p class="s12" style="padding-top: 5pt;padding-left: 36pt;text-indent: -11pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_203.png"/></span> <span class="s3">Tightly coupled register file (LRAM) with an optional sequence controller for easily caching and feeding back results</span></p><p class="s3" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;line-height: 148%;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_204.png"/></span><span class="s12"> </span>Tightly coupled BRAM for reusable input data such as kernels or weights <span><img width="5" height="5" alt="image" src="Image_205.png"/></span><span class="s26"> </span>Cascade paths up a column of MLPs</p><p class="s3" style="padding-left: 54pt;text-indent: 0pt;line-height: 148%;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_206.png"/></span><span class="s12"> </span>Allows for broadcast of operands up a column of MLPs without using up critical routing resources <span><img width="5" height="5" alt="image" src="Image_207.png"/></span><span class="s26"> </span>Allows for adder trees to extend across multiple MLPs</p><p class="s12" style="padding-left: 66pt;text-indent: -11pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_208.png"/></span> <span class="s3">Broadcast read/write to tightly coupled BRAMs up a column of MLPs to efficiently create large memories</span></p><p class="s3" style="padding-top: 11pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Along with the numerous multiply configurations, the MLP block includes optional input and pipelining registers at various locations to support high-frequency designs. There is a deep adder tree after the multipliers with the option to bypass the adders and output the multiplier products directly. In addition, a feedback path allows for accumulation within the MLP block.</p><p class="s3" style="padding-top: 5pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Below are block diagrams showing the MLP using the fixed or floating-point formats.</p><p style="padding-top: 7pt;text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 11pt;text-indent: 0pt;text-align: left;"><span><img width="659" height="434" alt="image" src="Image_209.jpg"/></span></p><p class="s18" style="padding-top: 9pt;text-indent: 0pt;text-align: center;">Figure 37: <span class="h4">MLP Using Fixed-Point Mode</span></p><p style="padding-top: 6pt;text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><span><img width="663" height="497" alt="image" src="Image_210.jpg"/></span></p><p class="s18" style="padding-top: 5pt;text-indent: 0pt;text-align: center;">Figure 38: <span class="h4">MLP Using Floating-Point Mode</span></p><p class="s3" style="padding-top: 10pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">A powerful feature available in Achronix&#39;s MLP is the ability to connect several MLPs with dedicated high-speed cascade paths. The cascade paths allow for the adder tree to extend across multiple MLP blocks in a column without using extra fabric routing resources, and a data cascade/broadcast path is available to send operands across multiple MLP blocks. Cascading input or result data to multiple MLPs in parallel allows for complex, multi- element operations to be performed efficiently without the need for extra routing. Below is a diagram showing the cascade paths across MLPs.</p><p style="padding-top: 4pt;text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 190pt;text-indent: 0pt;text-align: left;"><span><img width="198" height="519" alt="image" src="Image_211.jpg"/></span></p><p style="text-indent: 0pt;text-align: left;"><span><img width="672" height="56" alt="image" src="Image_212.png"/></span></p><div class="textbox" style="border:0.8pt solid #9EB6D3;display:block;min-height:41.3pt;width:503.2pt;"><p class="s23" style="padding-top: 4pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Note</p><p class="s24" style="padding-top: 6pt;padding-left: 30pt;text-indent: 0pt;text-align: left;">Straight addition within the ACX_MLP72 (without a leading multiplication) is not supported.</p></div><p style="text-indent: 0pt;text-align: left;"/><p class="s18" style="padding-top: 7pt;text-indent: 0pt;text-align: center;">Figure 39: <span class="h4">MLP Cascade Path</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="toc">&nbsp;</p><div class="toc"><a class="toc0" href="part140.htm">Numerical Formats</a><a class="toc0" href="part141.htm">Parallel Multiplications</a><a class="toc0" href="part142.htm">Memories</a><a class="toc0" href="part143.htm">Instantiation</a><a class="toc0" href="part144.htm">Common Stages</a><a class="toc1" href="part145.htm">Stages</a><a class="toc2" href="part146.htm">Symmetrical Structure</a><a class="toc1" href="part147.htm">Modes</a><a class="toc1" href="part148.htm">Common Signals</a><a class="toc2" href="part149.htm">Parameters</a><a class="toc2" href="part150.htm">Ports</a><a class="toc1" href="part151.htm">Input Selection</a><a class="toc2" href="part152.htm">Parameters</a><a class="toc2" href="part153.htm">Ports</a><a class="toc0" href="part154.htm">Integer Modes</a><a class="toc1" href="part155.htm">Byte Selection</a><a class="toc2" href="part156.htm">Int8</a><a class="toc2" href="part157.htm">Int7</a><a class="toc2" href="part158.htm">Int6</a><a class="toc2" href="part159.htm">Int4</a><a class="toc2" href="part160.htm">Int3</a><a class="toc2" href="part161.htm">Int16</a><a class="toc2" href="part162.htm">Parameters</a><a class="toc1" href="part163.htm">Multiplier Stage</a><a class="toc2" href="part164.htm">Parallel Multiplications</a><a class="toc2" href="part165.htm">Number Formats</a><a class="toc2" href="part167.htm">Format Consistency</a><a class="toc2" href="part168.htm">Parameters</a><a class="toc1" href="part169.htm">Output Stage</a><a class="toc2" href="part170.htm">Parameters</a><a class="toc2" href="part171.htm">Ports</a><a class="toc0" href="part172.htm">Integrated LRAM</a><a class="toc1" href="part173.htm">Standalone LRAM</a><a class="toc1" href="part174.htm">LRAM Operational Modes</a><a class="toc1" href="part175.htm">LRAM Virtual Ports</a><a class="toc1" href="part176.htm">Interconnection Diagram</a><a class="toc1" href="part177.htm">FIFO Address Generators</a><a class="toc2" href="part178.htm">Length Adjustment</a><a class="toc2" href="part179.htm">Mode 2 Pointer Reset</a><a class="toc2" href="part180.htm">Ignore Flags</a><a class="toc1" href="part181.htm">Parameters</a><a class="toc1" href="part182.htm">Ports</a><a class="toc0" href="part183.htm">Block Floating-Point Modes</a><a class="toc1" href="part184.htm">Input Selection</a><a class="toc2" href="part185.htm">Multiplication Operation</a><a class="toc1" href="part186.htm">Byte Selection</a><a class="toc2" href="part187.htm">BFP Int8</a><a class="toc2" href="part188.htm">BFP Int7</a><a class="toc2" href="part189.htm">BFP Int6</a><a class="toc2" href="part190.htm">BFP Int4 and Int3</a><a class="toc2" href="part191.htm">BFP Int16</a><a class="toc1" href="part192.htm">Ports</a><a class="toc1" href="part193.htm">Parameters</a><a class="toc0" href="part194.htm">Floating-Point Modes</a><a class="toc1" href="part195.htm">Byte Selection</a><a class="toc2" href="part196.htm">BFLOAT16</a><a class="toc2" href="part197.htm">FP16</a><a class="toc2" href="part198.htm">FP24</a><a class="toc2" href="part199.htm">Parameters</a><a class="toc1" href="part200.htm">Multiplication Stage</a><a class="toc2" href="part201.htm">Parameters</a><a class="toc1" href="part202.htm">Output Stage</a><a class="toc2" href="part203.htm">OUT_REG</a><a class="toc2" href="part204.htm">Parameters</a><a class="toc0" href="part205.htm">Verilog</a></div><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part138.htm">&lt; Previous</a><span> | </span><a href="../Speedster7t_Component_Library_User_Guide_UG086-1.html">Contents</a><span> | </span><a href="part140.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
