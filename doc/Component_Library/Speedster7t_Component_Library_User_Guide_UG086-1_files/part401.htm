<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Ports</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part400.htm">&lt; Previous</a><span> | </span><a href="../Speedster7t_Component_Library_User_Guide_UG086-1.html">Contents</a><span> | </span><a href="part402.htm">Next &gt;</a></p><p class="s25" style="padding-top: 18pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark523">&zwnj;</a>Ports<a name="bookmark570">&zwnj;</a></p><p class="s18" style="padding-top: 8pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Table 223: <span class="h4">ACX_LRAM2K_SDP Pin Descriptions</span></p><p style="text-indent: 0pt;text-align: left;"><br/></p><table style="border-collapse:collapse;margin-left:6.375pt" cellspacing="0"><tr style="height:21pt"><td style="width:81pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666" bgcolor="#A5E5BA"><p class="s61" style="padding-top: 5pt;text-indent: 0pt;text-align: center;">Name</p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666" bgcolor="#A5E5BA"><p class="s61" style="padding-top: 5pt;padding-left: 7pt;text-indent: 0pt;text-align: left;">Direction</p></td><td style="width:372pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666" bgcolor="#A5E5BA"><p class="s61" style="padding-top: 5pt;text-indent: 0pt;text-align: center;">Description</p></td></tr><tr style="height:41pt"><td style="width:81pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p style="padding-top: 7pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s64" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">wrclk</p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p style="padding-top: 6pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s62" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Input</p></td><td style="width:372pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p class="s62" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Write clock input. Write operations are fully synchronous and occur upon the active edge of the <span class="s64">wrclk </span>input when <span class="s64">wren </span>is asserted. The active edge of <span class="s64">wrclk </span>is determined by the <span class="s64">wrclk_polarity </span>parameter.</p></td></tr><tr style="height:22pt"><td style="width:81pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p class="s64" style="padding-top: 6pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">wren</p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p class="s62" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Input</p></td><td style="width:372pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p class="s62" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Write port enable. Assert <span class="s64">wren </span>high to perform a write operation.</p></td></tr><tr style="height:31pt"><td style="width:81pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p style="padding-top: 2pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s64" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">wraddr[5:0]</p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p style="padding-top: 1pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s62" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Input</p></td><td style="width:372pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p class="s62" style="padding-top: 5pt;padding-left: 4pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">The <span class="s64">wraddr[] </span>signal determines which memory location is being written to. When <span class="s64">write_width </span>is 72 bits, the address must be top-justified, meaning that the low-order address bits must be 0.</p></td></tr><tr style="height:22pt"><td style="width:81pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p class="s64" style="padding-top: 6pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">din[143:0]</p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p class="s62" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Input</p></td><td style="width:372pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p class="s62" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">The <span class="s64">din[] </span>signal determines the data to write to the memory array during a write operation.</p></td></tr><tr style="height:42pt"><td style="width:81pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p style="padding-top: 7pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s64" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">rdclk</p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p style="padding-top: 6pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s62" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Input</p></td><td style="width:372pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p class="s62" style="padding-top: 5pt;padding-left: 4pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">Read clock input. When <span class="s64">outreg_enable=1</span>, read operations are fully synchronous and occur upon the active edge of the <span class="s64">rdclk </span>clock input. The active edge of <span class="s64">rdclk </span>is determined by the <span class="s64">rdclk_polarity </span>parameter.</p></td></tr><tr style="height:31pt"><td style="width:81pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p style="padding-top: 2pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s64" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">rdaddr[5:0]</p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p style="padding-top: 1pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s62" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Input</p></td><td style="width:372pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p class="s62" style="padding-top: 5pt;padding-left: 4pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">The <span class="s64">rdaddr[] </span>signal determines which memory location is being read from. When <span class="s64">read_width </span>is 72 bits, the address must be top-justified, meaning that the low-order address bits must be 0.</p></td></tr><tr style="height:52pt"><td style="width:81pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s64" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">outreg_rstn</p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s62" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Input</p></td><td style="width:372pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p class="s62" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Output register and memory array reset. When <span class="s64">outreg_rstn </span>is asserted low, the value of the output registers is reset to 0. In addition, if <span class="s64">clear_enable </span>is set, the contents of the memory array are also reset to 0. The parameter <span class="s64">outreg_sr_assertion </span>controls whether this output register reset is synchronous or asynchronous. The memory array is always reset synchronous to <span class="s64">wrclk</span>.</p></td></tr><tr style="height:42pt"><td style="width:81pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p style="padding-top: 7pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s64" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">outreg_ce</p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p style="padding-top: 6pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s62" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Input</p></td><td style="width:372pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p class="s62" style="padding-top: 5pt;padding-left: 4pt;padding-right: 9pt;text-indent: 0pt;text-align: left;">Output register clock enable (active high). When <span class="s64">outreg_enable=1</span>, de-asserting <span class="s64">outreg_ce </span>causes the ACX_LRAM2K_SDP to hold the <span class="s64">dout[] </span>signal unchanged, independent of a read operation. When <span class="s64">outreg_enable=0</span>, the <span class="s64">outreg_ce </span>input is ignored.</p></td></tr><tr style="height:63pt"><td style="width:81pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s64" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">dout[143:0]</p></td><td style="width:50pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s62" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">Output</p></td><td style="width:372pt;border-top-style:solid;border-top-width:1pt;border-top-color:#666666;border-left-style:solid;border-left-width:1pt;border-left-color:#666666;border-bottom-style:solid;border-bottom-width:1pt;border-bottom-color:#666666;border-right-style:solid;border-right-width:1pt;border-right-color:#666666"><p class="s62" style="padding-top: 5pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">Read port data output:</p><p class="s64" style="padding-top: 2pt;padding-left: 4pt;text-indent: 0pt;text-align: left;">outreg_enable=0 <span class="s62">– the </span>dout[] <span class="s62">output is updated with the memory contents addressed by</span></p><p class="s64" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">rdaddr[] <span class="s62">immediately (asynchronously).</span></p><p class="s64" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">outreg_enable=1 <span class="s62">– the </span>dout[] <span class="s62">output is updated with the memory contents addressed by</span></p><p class="s64" style="padding-left: 4pt;text-indent: 0pt;text-align: left;">rdaddr[] <span class="s62">on the next active edge of </span>rdclk<span class="s62">.</span></p></td></tr></table><p style="padding-top: 8pt;text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part400.htm">&lt; Previous</a><span> | </span><a href="../Speedster7t_Component_Library_User_Guide_UG086-1.html">Contents</a><span> | </span><a href="part402.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
