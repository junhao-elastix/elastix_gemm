<!DOCTYPE  html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>Timing Diagrams</title><link href="navigation.css" rel="stylesheet" type="text/css"/><link href="document.css" rel="stylesheet" type="text/css"/></head><body><p class="top_nav"><a href="part366.htm">&lt; Previous</a><span> | </span><a href="../Speedster7t_Component_Library_User_Guide_UG086-1.html">Contents</a><span> | </span><a href="part368.htm">Next &gt;</a></p><p class="s25" style="padding-top: 18pt;padding-left: 6pt;text-indent: 0pt;text-align: left;"><a name="bookmark489">&zwnj;</a>Timing Diagrams<a name="bookmark552">&zwnj;</a></p><p class="s3" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">The timing diagrams for both values of the <span class="s17">outreg_enable </span>parameter are shown below. The first timing diagram illustrates the behavior of a ACX_BRAM72K_SDP instance with the output register disabled. The following describes the behavior of the ACX_BRAM72K_SDP on each clock cycle of the diagram, where each line represents a transaction that spans the clock cycles indicated:</p><p class="s72" style="padding-top: 4pt;padding-left: 6pt;text-indent: 0pt;text-align: left;">Write clock</p><p class="s3" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_466.png"/></span><span class="s12"> </span>1 – no-op. <span class="s17">wren </span>is asserted but <span class="s17">we </span>is not asserted. Nothing is written to the memory array.</p><p class="s3" style="padding-top: 5pt;padding-left: 36pt;text-indent: -11pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_467.png"/></span><span class="s12"> </span>2, 3, 4 – write. <span class="s17">wren </span>and <span class="s17">we </span>are both asserted. Data on <span class="s17">din[] </span>is committed to the <span class="s17">wraddr[] </span>location in the memory array.</p><p style="text-indent: 0pt;text-align: left;"><br/></p><p class="s72" style="padding-left: 6pt;text-indent: 0pt;text-align: left;">Read clock</p><p class="s3" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_468.png"/></span><span class="s12"> </span>4 – read reset latch. <span class="s17">outlatch_rstn </span>is asserted, causing the output of the latch to be set to 0.</p><p class="s12" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_469.png"/></span> <span class="s17">outreg_enable=0 </span><span class="s3">– the data is reset to zero on the following cycle.</span></p><p class="s17" style="padding-top: 5pt;padding-left: 66pt;text-indent: -11pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_470.png"/></span><span class="s12"> </span>outreg_enable=1 <span class="s3">– the output of the latch is reset to zero on the following cycle. The value is visible at the output of the memory on the second cycle because </span>outreg_ce <span class="s3">is asserted.</span></p><p class="s3" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_471.png"/></span><span class="s12"> </span>6 – Read. <span class="s17">rden </span>is asserted. The memory is read from the memory array.</p><p class="s12" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_472.png"/></span> <span class="s17">outreg_enable=0 </span><span class="s3">– the value is output on the following cycle.</span></p><p class="s17" style="padding-top: 5pt;padding-left: 66pt;text-indent: -11pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_473.png"/></span><span class="s12"> </span>outreg_enable=1 <span class="s3">– the value is output two cycles later, because </span>outreg_ce <span class="s3">is asserted on the next cycle.</span></p><p class="s3" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_474.png"/></span><span class="s12"> </span>7 – read with latch/register reset. <span class="s17">rden </span>is asserted. The memory is read from the memory array.</p><p class="s17" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_475.png"/></span><span class="s12"> </span>outreg_enable=0 <span class="s3">– </span>dout[] <span class="s3">is set to 0 since </span>outlatch_rstn <span class="s3">is asserted.</span></p><p class="s17" style="padding-top: 5pt;padding-left: 66pt;text-indent: -11pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_476.png"/></span><span class="s12"> </span>outreg_enable=1 <span class="s3">– </span>dout[] <span class="s3">is set to 0 after two cycles since </span>outreg_rstn <span class="s3">is asserted on the following cycle.</span></p><p class="s3" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_477.png"/></span><span class="s12"> </span>8 – read. <span class="s17">rden </span>is asserted. The memory is read from the memory array.</p><p class="s12" style="padding-top: 5pt;padding-left: 54pt;text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_478.png"/></span> <span class="s17">outreg_enable=0 </span><span class="s3">– the value is output on the following cycle.</span></p><p class="s17" style="padding-top: 5pt;padding-left: 66pt;text-indent: -11pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_479.png"/></span><span class="s12"> </span>outreg_enable=1 <span class="s3">– the value is output two cycles later, because </span>outreg_ce <span class="s3">is asserted on the next cycle.</span></p><p class="s3" style="padding-top: 5pt;padding-left: 36pt;text-indent: -11pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_480.png"/></span><span class="s12"> </span>7, 8 – read. <span class="s17">rden </span>is asserted. The memory is read from the memory array and presented on <span class="s17">dout[] </span>on the following cycle.</p><p class="s3" style="padding-top: 5pt;padding-left: 24pt;text-indent: 0pt;text-align: left;"><span><img width="5" height="5" alt="image" src="Image_481.png"/></span><span class="s12"> </span>8, 9 – hold. <span class="s17">rden </span>and <span class="s17">outlatch_rstn </span>are both de-asserted. <span class="s17">dout[] </span>retains its previous value.</p><p style="padding-top: 4pt;text-indent: 0pt;text-align: left;"><br/></p><p style="padding-left: 12pt;text-indent: 0pt;text-align: left;"><span><img width="648" height="374" alt="image" src="Image_482.jpg"/></span></p><p style="padding-top: 3pt;text-indent: 0pt;text-align: left;"><br/></p><p class="s18" style="text-indent: 0pt;text-align: center;">Figure 73: <span class="h4">ACX_BRAM72K_SDP Timing Diagram</span></p><p style="padding-top: 4pt;text-indent: 0pt;text-align: left;"><br/></p><p class="nav">&nbsp;&nbsp;</p><p class="nav">&nbsp;</p><p class="nav"><a href="part366.htm">&lt; Previous</a><span> | </span><a href="../Speedster7t_Component_Library_User_Guide_UG086-1.html">Contents</a><span> | </span><a href="part368.htm">Next &gt;</a></p><p class="nav">&nbsp;&nbsp;</p></body></html>
